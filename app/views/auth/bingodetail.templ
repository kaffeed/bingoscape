package auth

import (
	"fmt"
	"github.com/kaffeed/bingoscape/app/views"
	"github.com/kaffeed/bingoscape/app/views/components"
	"github.com/kaffeed/bingoscape/app/views/layout"
)

templ BingoDetail(isManagement, showOther bool, bingo views.BingoDetailModel, loginId int32) {
	<div class="flex flex-col w-full">
		<section class="mx-auto w-3/5 flex flex-col gap-8 text-center">
			@bingoDetailHeader(isManagement, bingo)
			@BingoBoard(isManagement, false, bingo, loginId)
			@ChangeTeamView(isManagement, bingo, loginId)
		</section>
	</div>
}

templ ChangeTeamView(isManagement bool, bingo views.BingoDetailModel, loginId int32) {
	if isManagement {
		<div
			id="changeteamview"
			class="flex flex-col pb-5"
			hx-target="#changeteamview"
			hx-swap="outerHTML"
			hx-trigger="updateTeams from:body"
			hx-get={ fmt.Sprintf("/bingos/%d/participantViewSwitch", bingo.ID) }
		>
			<select
				hx-get={ fmt.Sprintf("/bingos/%d/board", bingo.ID) }
				hx-target="#bingoBoard"
				hx-trigger="change"
				hx-swap="outerHTML"
				name="forUser"
				class="select select-bordered w-full max-w-xs"
			>
				<option value={ fmt.Sprintf("%d", loginId) } selected>Overview</option>
				for p := range bingo.Participants {
					<option value={ fmt.Sprintf("%d", p.ID) }>{ p.Name }</option>
				}
			</select>
		</div>
	}
}

templ BingoBoard(isManagement, forOther bool, bingo views.BingoDetailModel, loginId int32) {
	<div
		id="bingoBoard"
		class={ "grid" , "grid-flow-row" , fmt.Sprintf("grid-rows-%d",bingo.Rows), fmt.Sprintf("grid-cols-%d",
		bingo.Cols), "gap-1" }
	>
		for _, t := range bingo.Tiles {
			@tileView(isManagement, forOther, t, t.Stats(loginId))
		}
	</div>
}

templ chartData(bingo views.BingoDetailModel) {
	@templ.JSONScript("leaderboardData", bingo.Leaderboard)
	<script type="text/javascript">
	htmx.trigger('body', 'updateLeaderboard')
	</script>
}

templ bingoDetailHeader(isManagement bool, bingo views.BingoDetailModel) {
	<div class="flex flex-col items-start justify-start">
		<h1 class="text-5xl font-bold">{ bingo.Title }</h1>
		<div class="flex flex-row gap gap-2">
			<button class="btn btn-ghost text-3xl" onclick="teamsmodal.showModal()">teams</button>
			<button class="btn btn-ghost text-3xl" onclick="statsmodal.showModal()">stats</button>
		</div>
	</div>
	<dialog id="statsmodal" class="modal">
		<div class="modal-box w-11/12 max-w-5xl h-11/12 max-h-5xl">
			<button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2" onclick="statsmodal.close()">✕</button>
			<div class="w-full flex flex-row">
				<div class="hero min-w-screen bg-base-200 py-12 px-4">
					<div class="hero-content text-center">
						<div class="max-w-3xl relative">
							<!-- Valid Dates -->
							<div class="grid grid-cols-2 gap-4 mb-8">
								<div>
									<p class="text-lg md:text-xl font-bold">Start (UTC):</p>
									<p class="text-gray-500">{ bingo.Validfrom.Time.Format("Jan 2, 2006 3:04 PM") }</p>
								</div>
								<div>
									<p class="text-lg md:text-xl font-bold">End (UTC):</p>
									<p class="text-gray-500">{ bingo.Validto.Time.Format("Jan 2, 2006 3:04 PM") }</p>
								</div>
							</div>
							<!-- Codephrase -->
							<p class="py-4 text-4xl md:text-2xl font-bold flex items-center justify-center mb-8">
								<span class="mr-2">Codephrase:</span>
								<span class="badge badge-primary">"{ bingo.Codephrase }"</span>
							</p>
							<!-- Description -->
							<div class="text-left mb-8 justify-center">
								<p class="text-lg md:text-xl font-bold">Description:</p>
								<p class="text-gray-500">{ bingo.Description }</p>
							</div>
							<!-- Set as Ready Button -->
							if isManagement {
								<div class="flex flex-row gap-2">
									@BingoVisibilityButton(bingo.ID, bingo.Active)
									@BingoSubmissionsClosedButton(bingo.ID, bingo.SubmissionsClosed)
									@BingoLeaderboardPublicButton(bingo.ID, bingo.LeaderboardPublic)
								</div>
							}
							if !isManagement && bingo.SubmissionsClosed {
								<div class="mx-auto">
									<div class="badge badge-error gap-2">
										SUBMISSIONS CLOSED
									</div>
								</div>
							}
						</div>
					</div>
				</div>
				if isManagement || bingo.LeaderboardPublic {
					<div class="hero w-full bg-base-200 py-12 px-4">
						<div class="w-full relative">
							<h1 class="text-5xl font-bold leading-tight mb-8">Leaderboard</h1>
							<canvas id="leaderboardChart" class="w-full h-96 hidden"></canvas>
							<span class="mx-auto" id="noSubmissionText">No submission yet</span>
							@chartData(bingo)
						</div>
					</div>
				}
			</div>
		</div>
		<!-- Open the modal using ID.showModal() method -->
	</dialog>
	<dialog id="teamsmodal" class="modal">
		<div class="modal-box w-11/12 max-w-5xl h-11/12 max-h-5xl">
			<button class="btn btn-sm btn-circle btn-ghost absolute right-2 top-2" onclick="teamsmodal.close()">✕</button>
			@components.BingoTeams(isManagement, bingo)
		</div>
	</dialog>
}

templ BingoVisibilityButton(bingoId int32, ready bool) {
	<label class="flex flex-col justify-start gap-2">
		<span class="text-lg md:text-xl font-bold gap-2">
			Visibility 
		</span>
		<input
			class="toggle toggle-success mx-auto"
			hx-put={ fmt.Sprintf("/bingos/%d/toggleState", bingoId) }
			hx-swap="outerHTML"
			hx-target="closest label"
			hx-trigger="change"
			type="checkbox"
			name="codephrase"
			checked?={ ready }
		/>
	</label>
}

templ BingoSubmissionsClosedButton(bingoId int32, submissionsClosed bool) {
	<label
		class="flex flex-col justify-start gap-2"
	>
		<span class="text-lg md:text-xl font-bold gap-2">
			Submissions 
		</span>
		<input
			class="toggle toggle-error mx-auto"
			hx-put={ fmt.Sprintf("/bingos/%d/toggleSubmissionsClosed", bingoId) }
			id="submissionToggle"
			hx-swap="outerHTML"
			hx-target="closest label"
			hx-trigger="change"
			type="checkbox"
			name="codephrase"
			checked?={ submissionsClosed }
		/>
	</label>
}

templ BingoLeaderboardPublicButton(bingoId int32, leaderboardPublic bool) {
	<label
		class="flex flex-col gap-2"
	>
		<span class="text-lg md:text-xl font-bold">
			Leaderboard
		</span>
		<input
			class="toggle toggle-success mx-auto"
			hx-put={ fmt.Sprintf("/bingos/%d/toggleLeaderboardPublic", bingoId) }
			hx-swap="outerHTML"
			hx-target="closest label"
			hx-trigger="change"
			type="checkbox"
			name="codephrase"
			checked?={ leaderboardPublic }
		/>
	</label>
}

templ tileView(isManagement, forOther bool, t views.TileModel, s views.TileStats) {
	<div
		hx-get={ fmt.Sprintf("/tiles/%d", t.ID) }
		class="cursor-pointer relative border-2 border-rounded border-primary hover:border-secondary aspect-square gap-2"
		hx-swap="transition:true"
		hx-target="body"
		hx-push-url="true"
	>
		<img src={ t.Imagepath } class="bingo-image object-contain" alt={ t.Title }/>
		if s.HasSubmissions || s.State != "" {
			<div class="absolute inset-1 flex">
				@stats(isManagement, forOther, s)
			</div>
		}
	</div>
}

templ stats(isManagement, forOther bool, s views.TileStats) {
	if isManagement && !forOther {
		<div class="tooltip text-lg" data-tip="Submitted">
			<div class="badge badge-info gap-2">
				{ fmt.Sprintf("%d", s.Submitted) }
			</div>
		</div>
		<div class="tooltip text-lg" data-tip="Requires User Action">
			<div class="badge badge-warning gap-2">
				{ fmt.Sprintf("%d", s.NeedReview) }
			</div>
		</div>
		<div class="tooltip text-lg" data-tip="Accepted">
			<div class="badge badge-success gap-2">
				{ fmt.Sprintf("%d", s.Accepted) }
			</div>
		</div>
	} else {
		@components.SubmissionIcons(s.State)
	}
}

templ BingoDetailIndex(
	title,
	username string,
	isAuthenticated bool,
	isManagement bool,
	isError bool,
	errMsgs, sucMsgs []string,
	cmp templ.Component) {
	@layout.Base(title, username, isAuthenticated, isManagement, isError, errMsgs, sucMsgs) {
		@cmp
	}
}
