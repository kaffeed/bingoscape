package auth

import "github.com/kaffeed/bingoscape/app/views/layout"
import "fmt"
import "github.com/kaffeed/bingoscape/app/views/components"
import "github.com/kaffeed/bingoscape/app/views"

templ BingoDetail(isManagement bool, bingo views.BingoDetailModel, loginId int32) {
	<div class="flex flex-col w-full">
		<section class="mx-auto w-3/5 flex flex-col gap-8 text-center">
			@bingoDetailHeader(isManagement, bingo)
			<div class="divider"></div>
			<div
				class={ "grid" , "grid-flow-row" , fmt.Sprintf("grid-rows-%d",bingo.Rows), fmt.Sprintf("grid-cols-%d",
		bingo.Cols), "gap-1" }
			>
				for _, t := range bingo.Tiles {
					@tileView(isManagement, t, loginId)
				}
			</div>
		</section>
		<div class="divider"></div>
		<section class="mx-auto w-3/5 flex flex-col gap-8 text-center">
			<div class="collapse bg-base-200">
				<input type="checkbox"/>
				<div class="collapse-title text-xl font-medium">Teams</div>
				<div class="collapse-content">
					@components.BingoTeams(isManagement, bingo)
				</div>
			</div>
		</section>
	</div>
}

templ chartData(bingo views.BingoDetailModel) {
	@templ.JSONScript("leaderboardData", bingo.Leaderboard)
	<script type="text/javascript">
	htmx.trigger('body', 'updateLeaderboard')
	</script>
}

templ bingoDetailHeader(isManagement bool, bingo views.BingoDetailModel) {
	<div class="w-full flex flex-row">
		<div class="hero min-w-screen bg-base-200 py-12 px-4">
			<div class="hero-content text-center">
				<div class="max-w-3xl relative">
					<h1 class="text-5xl font-bold leading-tight mb-8">{ bingo.Title }</h1>
					<!-- Valid Dates -->
					<div class="grid grid-cols-2 gap-4 mb-8">
						<div>
							<p class="text-lg md:text-xl font-bold">Start (UTC):</p>
							<p class="text-gray-500">{ bingo.Validfrom.Time.Format("Jan 2, 2006 3:04 PM") }</p>
						</div>
						<div>
							<p class="text-lg md:text-xl font-bold">End (UTC):</p>
							<p class="text-gray-500">{ bingo.Validto.Time.Format("Jan 2, 2006 3:04 PM") }</p>
						</div>
					</div>
					<!-- Codephrase -->
					<p class="py-4 text-4xl md:text-2xl font-bold flex items-center justify-center mb-8">
						<span class="mr-2">Codephrase:</span>
						<span class="badge badge-primary">"{ bingo.Codephrase }"</span>
					</p>
					<!-- Description -->
					<div class="text-left mb-8 justify-center">
						<p class="text-lg md:text-xl font-bold">Description:</p>
						<p class="text-gray-500">{ bingo.Description }</p>
					</div>
					<!-- Set as Ready Button -->
					if isManagement {
						@BingoVisibilityButton(bingo.ID, bingo.Active)
						@BingoSubmissionsClosedButton(bingo.ID, bingo.SubmissionsClosed)
						@BingoLeaderboardPublicButton(bingo.ID, bingo.LeaderboardPublic)
					}
					if !isManagement && bingo.SubmissionsClosed {
						<div class="mx-auto">
							<div class="badge badge-error gap-2">
								SUBMISSIONS CLOSED
							</div>
						</div>
					}
				</div>
			</div>
		</div>
		if isManagement || bingo.LeaderboardPublic {
			<div class="hero w-full bg-base-200 py-12 px-4">
				<div class="w-full relative">
					<h1 class="text-5xl font-bold leading-tight mb-8">Leaderboard</h1>
					<canvas id="leaderboardChart" class="w-full h-96"></canvas>
					@chartData(bingo)
				</div>
			</div>
		}
	</div>
}

templ BingoVisibilityButton(bingoId int32, ready bool) {
	<label
		class="flex justify-start gap-2"
	>
		<span class="text-lg md:text-xl font-bold gap-2">
			Set Visibility: 
		</span>
		<input
			class="toggle toggle-success pull-right"
			hx-put={ fmt.Sprintf("/bingos/%d/toggleState", bingoId) }
			hx-swap="outerHTML"
			hx-target="closest label"
			hx-trigger="change"
			type="checkbox"
			name="codephrase"
			checked?={ ready }
		/>
	</label>
}

templ BingoSubmissionsClosedButton(bingoId int32, submissionsClosed bool) {
	<label
		class="flex justify-start gap-2"
	>
		<span class="text-lg md:text-xl font-bold gap-2">
			Submissions closed: 
		</span>
		<input
			class="toggle toggle-error pull-right"
			hx-put={ fmt.Sprintf("/bingos/%d/toggleSubmissionsClosed", bingoId) }
			id="submissionToggle"
			hx-swap="outerHTML"
			hx-target="closest label"
			hx-trigger="change"
			type="checkbox"
			name="codephrase"
			checked?={ submissionsClosed }
		/>
	</label>
}

templ BingoLeaderboardPublicButton(bingoId int32, leaderboardPublic bool) {
	<label
		class="flex justify-start gap-2"
	>
		<span class="text-lg md:text-xl font-bold gap-2">
			Leaderboard public: 
		</span>
		<input
			class="toggle toggle-success pull-right"
			hx-put={ fmt.Sprintf("/bingos/%d/toggleLeaderboardPublic", bingoId) }
			hx-swap="outerHTML"
			hx-target="closest label"
			hx-trigger="change"
			type="checkbox"
			name="codephrase"
			checked?={ leaderboardPublic }
		/>
	</label>
}

templ tileView(isManagement bool, t views.TileModel, loginId int32) {
	<div
		hx-get={ fmt.Sprintf("/tiles/%d", t.ID) }
		class="cursor-pointer w-full relative border-2 border-rounded border-primary hover:border-secondary"
		hx-swap="transition:true"
		hx-target="body"
		hx-push-url="true"
	>
		<div class="relative h-4/5">
			<img src={ t.Imagepath } class="bingo-image" alt="Shoes"/>
			if isManagement {
				if t.Stats(loginId).HasSubmissions {
					<div class="absolute inset-0 bg-gray-900 opacity-40 rounded-md"></div>
					<div class="absolute inset-0 flex items-center justify-center">
						@stats(isManagement, t.Stats(loginId))
					</div>
				}
			} else {
				if t.Stats(loginId).State != "" {
					<div class="absolute inset-0 bg-gray-900 opacity-40 rounded-md"></div>
					<div class="absolute inset-0 flex items-center justify-center">
						@stats(isManagement, t.Stats(loginId))
					</div>
				}
			}
		</div>
		<div class="flex h-1/5 items-center justify-center rs w-full"><p class="truncate text-lg text-bold">{ t.Title }</p></div>
	</div>
}

templ stats(isManagement bool, s views.TileStats) {
	if isManagement {
		<div class="tooltip text-lg" data-tip="Submitted">
			<div class="badge badge-info gap-2">
				{ fmt.Sprintf("%d", s.Submitted) }
			</div>
		</div>
		<div class="tooltip text-lg" data-tip="Requires User Action">
			<div class="badge badge-warning gap-2">
				{ fmt.Sprintf("%d", s.NeedReview) }
			</div>
		</div>
		<div class="tooltip text-lg" data-tip="Accepted">
			<div class="badge badge-success gap-2">
				{ fmt.Sprintf("%d", s.Accepted) }
			</div>
		</div>
	} else {
		@components.SubmissionIcons(s.State)
	}
}

templ BingoDetailIndex(
	title,
	username string,
	isAuthenticated bool,
	isManagement bool,
	isError bool,
	errMsgs, sucMsgs []string,
	cmp templ.Component) {
	@layout.Base(title, username, isAuthenticated, isManagement, isError, errMsgs, sucMsgs) {
		@cmp
	}
}
