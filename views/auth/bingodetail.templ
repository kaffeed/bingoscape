package auth

import "github.com/kaffeed/bingoscape/views/layout"
import "fmt"
import "github.com/kaffeed/bingoscape/views/components"
import "github.com/kaffeed/bingoscape/views"

templ BingoDetail(isManagement bool, bingo views.BingoDetailModel, loginId int32) {
	<div class="flex flex-col w-full">
		<section class="mx-auto w-3/5 flex flex-col gap-8 text-center">
			@bingoDetailHeader(isManagement, bingo)
			<div class="divider"></div>
			<div
				class={ "grid" , "grid-flow-row" , fmt.Sprintf("grid-rows-%d",bingo.Rows), fmt.Sprintf("grid-cols-%d",
		bingo.Cols), "gap-1" }
			>
				for _, t := range bingo.Tiles {
					@tileView(isManagement, t, loginId)
				}
			</div>
		</section>
		<div class="divider"></div>
		<section class="mx-auto w-3/5 flex flex-col gap-8 text-center">
			@components.BingoTeams(isManagement, bingo)
		</section>
		<div class="divider"></div>
	</div>
}

templ bingoDetailHeader(isManagement bool, bingo views.BingoDetailModel) {
	<div class="hero min-w-screen bg-base-200 py-12 px-4">
		<div class="hero-content text-center">
			<div class="max-w-3xl mx-auto relative">
				<h1 class="text-5xl font-bold leading-tight mb-8">{ bingo.Title }</h1>
				<!-- Valid Dates -->
				<div class="grid grid-cols-2 gap-4 mb-8">
					<div>
						<p class="text-lg md:text-xl font-bold">Start (UTC):</p>
						<p class="text-gray-500">{ bingo.Validfrom.Time.Format("Jan 2, 2006 3:04 PM") }</p>
					</div>
					<div>
						<p class="text-lg md:text-xl font-bold">End (UTC):</p>
						<p class="text-gray-500">{ bingo.Validto.Time.Format("Jan 2, 2006 3:04 PM") }</p>
					</div>
				</div>
				<!-- Codephrase -->
				<p class="py-4 text-4xl md:text-2xl font-bold flex items-center justify-center mb-8">
					<span class="mr-2">Codephrase:</span>
					<span class="badge badge-primary">"{ bingo.Codephrase }"</span>
				</p>
				<!-- Description -->
				<div class="text-left mb-8 justify-center">
					<p class="text-lg md:text-xl font-bold">Description:</p>
					<p class="text-gray-500">{ bingo.Description }</p>
				</div>
				<!-- Set as Ready Button -->
				if isManagement {
					@BingoStateButton(bingo.ID, bingo.Active)
				}
			</div>
		</div>
	</div>
}

templ BingoStateButton(bingoId int32, ready bool) {
	<label
		class="flex justify-start gap-2"
	>
		<span class="text-lg md:text-xl font-bold gap-2">
			Active: 
		</span>
		<input
			class="toggle toggle-success pull-right"
			hx-put={ fmt.Sprintf("/bingos/%d/toggleState", bingoId) }
			hx-confirm="Are you sure you want to change the bingo state?"
			hx-swap="closest label"
			hx-trigger="change"
			type="checkbox"
			name="codephrase"
			checked?={ ready }
		/>
	</label>
}

templ tileView(isManagement bool, t views.TileModel, loginId int32) {
	<div
		hx-get={ fmt.Sprintf("/tiles/%d", t.ID) }
		class="cursor-pointer relative border border-gray-500 border-rounded"
		hx-swap="transition:true"
		hx-target="body"
		hx-push-url="true"
	>
		<div class="relative h-4/5">
			<img src={ t.Imagepath } class="bingo-image" alt="Shoes"/>
			if isManagement {
				if t.Stats(loginId).HasSubmissions {
					<div class="absolute inset-0 bg-gray-900 opacity-40 rounded-md"></div>
					<div class="absolute inset-0 flex items-center justify-center">
						@stats(isManagement, t.Stats(loginId))
					</div>
				}
			} else {
				if t.Stats(loginId).State != "" {
					<div class="absolute inset-0 bg-gray-900 opacity-40 rounded-md"></div>
					<div class="absolute inset-0 flex items-center justify-center">
						@stats(isManagement, t.Stats(loginId))
					</div>
				}
			}
		</div>
		<div class="rs flex h-1/5 items-center justify-center text-xl">{ t.Title }</div>
	</div>
}

templ stats(isManagement bool, s views.TileStats) {
	if isManagement {
		<div class="tooltip text-lg" data-tip="Submitted">
			<div class="badge badge-info gap-2">
				{ fmt.Sprintf("%d", s.Submitted) }
			</div>
		</div>
		<div class="tooltip text-lg" data-tip="Accepted">
			<div class="badge badge-success gap-2">
				{ fmt.Sprintf("%d", s.Accepted) }
			</div>
		</div>
		<div class="tooltip text-lg" data-tip="Requires User Action">
			<div class="badge badge-warning gap-2">
				{ fmt.Sprintf("%d", s.NeedReview) }
			</div>
		</div>
	} else {
		@components.SubmissionIcons(s.State)
	}
}

templ BingoDetailIndex(
	title,
	username string,
	isAuthenticated bool,
	isManagement bool,
	isError bool,
	errMsgs, sucMsgs []string,
	cmp templ.Component) {
	@layout.Base(title, username, isAuthenticated, isManagement, isError, errMsgs, sucMsgs) {
		@cmp
	}
}
